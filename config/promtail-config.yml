server:
  http_listen_port: 9080         # Port for Promtail web interface
  grpc_listen_port: 0            # Disable gRPC (not required for this setup)

positions:
  filename: /tmp/positions.yaml  # File to store last read position (prevents log duplication)

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: python_app_logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        # Impact: Only scrape logs from containers with the label logging=promtail
        # This prevents collecting logs from all containers, improving performance
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      # Impact: Clean container naming for better log organization in Grafana
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'
      
      # Impact: Distinguish between stdout/stderr streams for debugging
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'logstream'
      
      # Impact: Custom job naming from Docker labels for log categorization
      - source_labels: ['__meta_docker_container_label_logging_jobname']
        target_label: 'job'

      - source_labels: ['__meta_docker_container_log_path']
        target_label: '__path__'

      # Impact: Group logs by Docker Compose project for multi-environment setups
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'namespace'
    
    pipeline_stages:
      # Impact: Filter out health check logs to reduce noise in dashboards
      - drop:
          expression: '.*path.*"/health".*'

      # Impact: Parse structured JSON logs into searchable fields
      # This enables powerful querying and filtering in Grafana
      - json:
          expressions:
            # Extract common fields from structured logs
            xtime: "xtime"          
            level: "level"          
            msg: "msg"              
            request_id: "request_id" 
            user_id: "user_id"     
            method: "method"       
            path: "path"           
            status_code: "status_code" 
            response_time_ms: "response_time_ms"
            error: "error"         
            operation: "operation" 
      
      # Impact: Use application timestamps instead of ingestion time for accurate log ordering
      - timestamp:
          source: xtime
          format: RFC3339Nano

      # Impact: Create indexed labels for fast querying and dashboard filtering
      # These labels enable efficient log searches in Grafana
      - labels:
          level: ""        
          method: ""       
          status_code: ""  
          path: ""         
          container: ""    
          job: ""